1. 객체란 객관적으로 존재하는 실체를 의미한다. 지향은 위주, 주되는 것으로 삼는 것을 의미한다.

따라서 객체 지향 프로그래밍(Object Oriented Programming)이란 객관적으로 존재하는 실체 위주로 프로그래밍 하는 것을 의미한다. 객체지향의 키워드는 클래스, 오브젝트, 캡슐화, 상속성, 다형성이다. 클래스는 표현 대상들의 공통적인 특징을 서술한 것이다. 오브젝트는 클래스가 실체로 만들어진 것을 의미한다. 캡슐화는 데이터와 데이터를 다루는 방법을 묶는 것을 말하는데, 이는 관련있는 것들을 묶어서 이름을 부여하는 것을 의미한다. 상속성은 하나의 클래스가 갖고있는 특징들을 그대로 다른 클래스가 물려 받는 것을 의미한다. 보통 IS-A관계를 상속을 통해서 표현한다. 다형성은 상속성의 계층을 따라서 각각의 클래스에 한 가지 이름을 줄 수 있는 것을 의미한다. 이는 클래스에 동일한 이름의 메소드를 각각 상속받은 클래스가 다른 기능으로 사용할 수 있는 것을 말한다. 객체지향의 장점으로는 자연스러운 모델링, 생산성 향상, 점진적 개발, 견고한 의미적 모델링, 명확한 인터페이스 기술, 보안, 유지보수의 용이성이 있다.  객체지향 분석, 설계 방법론은 객체를 식별하고 일반화하고 대상들 간의 관계를 설정하고, 상호작용 하도록 하는 것이다. 대표적인 개발 모델은 폭포수 모델과 나선 모델이 있다.

  “객체지향 개념” 슬라이드를 읽고 느낀점은 위와 같은 특징들 때문에 객체 지향 프로그래밍이 게임 프로그래밍을 할 때 왜 적합한지 정확하게 알게되었다는 점이다. 게임 월드에서 가장 중요한 요소는 실세계의 요소들 혹은 몬스터와 같은 가상의 요소들간의 상호작용하는 것이라 생각한다. 이러한 점에서 우리가 사용하는 C++의 class문법이 얼마나 강력하고 효율성이 있는 도구인지에 대해 개념적으로 잘 정리되었다. 앞으로 객체 지향의 특징들을 잘 생각하면서 프로젝트의 구조를 설계하며 프로그래밍을 해야겠다고 느꼈다.

 

 

 

2-1 CamelCase (그 중 UpperCamelCase 와 lowerCamelCase 는 어떻게 구별하여 사용하는지 명시하라.)

단어가 합쳐진 부분마다 맨 처음 글자를 대문자로 표기하는 방법을 말한다. 두 개이상의 단어가 모인 합성어에 주로 사용한다. 

CamelCase는 UpperCamelCase, lowerCamelCase로 세부적으로 나뉜다.

 

UpperCamelCase는 맨 앞글자를 대문자로 표기하는 것을 말한다.

보통 함수나 클래스와 같은 객체단위에 많이 사용한다.

예를들어 KoreaPolytechnicUniversity와 같이 표기한다.

 

lowerCamelCase는 맨 앞글자를 소문자로 표기하는 것을 말한다.

보통 지역변수에 많이 사용하는 표기법이다.

예들들어 koreaPolytechnicUniversity와 같이 표기한다.

 

2-2 snake_case

snake_case란 단어가 합쳐진 부분마다 중간에 언더라인을 작성하여 표기하는 방법을 말한다.

snake_case는 스크립트 언어나 템플릿언어에서 주로 사용된다.

예를들어 Korea_Polytechnic_University나 korea_polytechnic_university와 같이 표기한다.

 

2-3 ALL_CAPS_UNDERSCORE

ALL_CAPS_UNDERSCORE는 모든 단어를 대문자로 쓰고 중간 공백은 언더바로 구분하는 표기법이다.

주로 전역변수, static변수같이 값 변경에 주의를 요하는 변수에 많이 사용된다.

예를들어 KOREA_POLYTECHNIC_UNIVERSITY와 같이 표기한다.

 

 

3. 첨부한 파일은 한 팀에서 사용하던 코딩컨벤션 문서이다. 문서를 읽어보고 각 항목별로 본인이 사용하던 방식과 어떻게 다는지 기술하라. 혹 문서의 주장과 반대 의견이 있으면 펼져 보아도 좋다

 

 첫 째장에 기술된 File은 최대 2,000line을 넘지 않도록 한다는 내용은 이해하기 어렵다. 객체들 간 여러 상호작용들을 구현하다보면 충분히 2,000line이 넘을 수 있다고 생각한다. 또한 DirectX12의 경우 장치 및 렌더링 시 설정해야할 옵션이 많아서 코드 라인이 길어질 수 밖에 없다. 한 파일에 2,000line을 제한하면 필요한 기능 구현에 불편함이 생길 것 같다.

 

 

 클래스, 함수, 반복문 등 정의를 할 때 괄호의 선언 위치가 다르다. 나는 보통 선언 다음 줄에 괄호를 쓰는 것을 선호한다. 그리고 클래스 이름 앞에 항상 대문자 C를 표기한다. 클래스 변수와 함수를 public -> protected -> private 순으로 정렬하는 것은 동일했다.

class CMyClass

{

 

}

 

 if, if-else, if else-if else statements에서 {를 항상 아래로 내리는 것을 선호한다.

if (a == b)

{

 

}

else if ( )

{

 

}

else

{

 

}

 

 변수의 naming은 헝가리안 표기법을 주로 사용한다. 멤버변수는 m_, 글로벌 변수는 g_ 등을 앞에 표기한다.

자료형에 따라 int는 i, float은 f, double은 d, char은 ch, string은 str 등을 변수 이름 앞에 붙인다.

int m_iNum, string m_strName, float fSpeed;

 

 함수의 이름은 동사 단어를 앞에 오도록하고 UpperCamelCase를 사용한다.

Image GetScaledInstance();

bool IsValid();

 

 

 